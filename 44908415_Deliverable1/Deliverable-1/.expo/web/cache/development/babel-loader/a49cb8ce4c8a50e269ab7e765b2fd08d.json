{"ast":null,"code":"var _jsxFileName = \"/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/LoginScreen.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppInput from \"../components/AppInput\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppText from \"../components/AppText\";\nimport DataManager from \"../config/DataManager\";\nvar schema = yup.object().shape({\n  email: yup.string().email(\"Please enter valid email\").required(\"Email is required\"),\n  password: yup.string().matches(/\\w*[a-z]\\w*/, \"Password needs a small letter\").matches(/\\w*[A-Z]\\w*/, \"Password needs a capital letter\").matches(/\\d/, \"Password needs a number\").matches(/[!@#$%^&*()\\-_\"=+{}; :,<.>]/, \"Password needs a special character\").min(8, function (_ref) {\n    var min = _ref.min;\n    return \"Password needs at least \" + min + \" characters\";\n  }).required(\"Password is required\")\n});\nvar users = [{\n  id: \"user1\",\n  name: \"Fake Account\",\n  email: \"fake@fake.com\",\n  password: \"Asdfgh1!\",\n  image: require(\"../assets/user3.jpg\")\n}, {\n  id: \"user2\",\n  name: \"Bake Account\",\n  email: \"baked@gmail.com\",\n  password: \"Asdfgh1!\",\n  image: require(\"../assets/user4.jpg\")\n}];\n\nvar validateUser = function validateUser(_ref2) {\n  var email = _ref2.email,\n      password = _ref2.password;\n  return users.filter(function (user) {\n    return user.email === email && user.password === password;\n  }).length > 0;\n};\n\nvar getUser = function getUser(_ref3) {\n  var email = _ref3.email;\n  return users.find(function (user) {\n    return user.email === email;\n  });\n};\n\nvar createUser = function createUser(_ref4) {\n  var email = _ref4.email;\n  var commonData = DataManager.getInstance();\n  var userID = getUser({\n    email: email\n  }).id;\n  commonData.setUserID(userID);\n};\n\nfunction LoginScreen(_ref5) {\n  var _this = this;\n\n  var navigation = _ref5.navigation;\n  return React.createElement(AppScreen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.logoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"tower-beach\",\n    size: 100,\n    color: AppColors.maroon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }\n  }), React.createElement(AppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 9\n    }\n  }, \"Good to see you again\")), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref6) {\n      var resetForm = _ref6.resetForm;\n\n      if (validateUser(values)) {\n        resetForm();\n        createUser(values);\n        navigation.navigate(\"TabNav\", {\n          screen: \"Profile\",\n          params: {\n            paramEmail: values.email,\n            paramName: getUser(values).name,\n            paramImage: getUser(values).image\n          }\n        });\n      } else {\n        resetForm();\n        alert(\"Invalid Login Details\");\n      }\n    },\n    validationSchema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, function (_ref7) {\n    var values = _ref7.values,\n        handleSubmit = _ref7.handleSubmit,\n        isValid = _ref7.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Field, {\n      component: AppInput,\n      icon: \"email\",\n      name: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\",\n      value: values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: AppInput,\n      icon: \"shield-lock\",\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      value: values.password,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }), React.createElement(AppButton, {\n      title: \"LOG IN\",\n      onPress: handleSubmit,\n      disabled: isValid || values.name === \"\" || values.email === \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 2\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1\n  },\n  textInputContainer: {\n    paddingVertical: 15\n  },\n  error: {\n    color: \"red\",\n    fontSize: 16.5\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/LoginScreen.js"],"names":["React","MaterialCommunityIcons","Formik","Field","yup","AppColors","AppButton","AppInput","AppScreen","AppText","DataManager","schema","object","shape","email","string","required","password","matches","min","users","id","name","image","require","validateUser","filter","user","length","getUser","find","createUser","commonData","getInstance","userID","setUserID","LoginScreen","navigation","styles","container","logoContainer","maroon","values","resetForm","navigate","screen","params","paramEmail","paramName","paramImage","alert","handleSubmit","isValid","StyleSheet","create","backgroundColor","background","padding","flex","justifyContent","alignItems","flexGrow","textInputContainer","paddingVertical","error","color","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { View, StyleSheet } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\n\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppInput from \"../components/AppInput\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppText from \"../components/AppText\";\nimport DataManager from \"../config/DataManager\";\n\nconst schema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Please enter valid email\")\n    .required(\"Email is required\"),\n  password: yup\n    .string()\n    .matches(/\\w*[a-z]\\w*/, \"Password needs a small letter\")\n    .matches(/\\w*[A-Z]\\w*/, \"Password needs a capital letter\")\n    .matches(/\\d/, \"Password needs a number\")\n    .matches(\n      /[!@#$%^&*()\\-_\"=+{}; :,<.>]/,\n      \"Password needs a special character\"\n    )\n    .min(8, ({ min }) => `Password needs at least ${min} characters`)\n    .required(\"Password is required\"),\n});\n\nconst users = [\n  {\n    id: \"user1\",\n    name: \"Fake Account\",\n    email: \"fake@fake.com\",\n    password: \"Asdfgh1!\",\n    image: require(\"../assets/user3.jpg\"),\n  },\n  {\n    id: \"user2\",\n    name: \"Bake Account\",\n    email: \"baked@gmail.com\",\n    password: \"Asdfgh1!\",\n    image: require(\"../assets/user4.jpg\"),\n  },\n];\n\nconst validateUser = ({ email, password }) => {\n  return (\n    users.filter((user) => user.email === email && user.password === password)\n      .length > 0\n  );\n};\n\nconst getUser = ({email}) => {\n  return users.find((user) => user.email === email);\n}\n\nconst createUser = ({email}) => {\n  let commonData = DataManager.getInstance();\n  let userID = getUser({email}).id;\n  commonData.setUserID(userID);\n}\n\nfunction LoginScreen({ navigation }) {\n  return (\n    <AppScreen style={styles.container}>\n      <View style={styles.logoContainer}>\n        <MaterialCommunityIcons\n          name=\"tower-beach\"\n          size={100}\n          color={AppColors.maroon}\n        />\n        <AppText>Good to see you again</AppText>\n      </View>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={(values, { resetForm }) => {\n          if (validateUser(values)) {\n            resetForm();\n            createUser(values);\n            navigation.navigate(\"TabNav\", {\n              screen: \"Profile\",\n                params:{\n                  paramEmail: values.email,\n                  paramName: getUser(values).name,\n                  paramImage:getUser(values).image\n                },\n            });\n          } else {\n            resetForm();\n            alert(\"Invalid Login Details\");\n          }\n        }}\n        validationSchema={schema}\n      >\n        {({ values, handleSubmit, isValid }) => (\n          <>\n            <Field\n              component={AppInput}\n              icon=\"email\"\n              name=\"email\"\n              placeholder=\"Email Address\"\n              keyboardType=\"email-address\"\n              value={values.email}\n            />\n            <Field\n              component={AppInput}\n              icon=\"shield-lock\"\n              name=\"password\"\n              placeholder=\"Password\"\n              secureTextEntry\n              value={values.password}\n            />\n\n            <AppButton\n              title=\"LOG IN\"\n              onPress={handleSubmit}\n              disabled={isValid || values.name === \"\" || values.email === \"\"}\n            />\n          </>\n        )}\n      </Formik>\n    </AppScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 2,\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1,\n  },\n  textInputContainer: {\n    paddingVertical: 15,\n  },\n  error: {\n    color: \"red\",\n    fontSize: 16.5,\n  },\n});\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}