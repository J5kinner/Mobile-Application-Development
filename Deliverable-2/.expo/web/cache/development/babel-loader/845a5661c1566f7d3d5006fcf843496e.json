{"ast":null,"code":"var _jsxFileName = \"/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/RegisterScreen.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppText from \"../components/AppText\";\nimport AppInput from \"../components/AppInput\";\nimport DataManager from \"../config/DataManager\";\nvar signUpValidateschema = yup.object().shape({\n  fullName: yup.string().matches(/(\\w.+\\s).+/, \"Enter at least 2 names\").required(\"Full name is required\"),\n  email: yup.string().email(\"Please enter valid email\").required(\"Email is required\"),\n  password: yup.string().matches(/\\w*[a-z]\\w*/, \"Password needs a small letter\").matches(/\\w*[A-Z]\\w*/, \"Password needs a capital letter\").matches(/\\d/, \"Password needs a number\").matches(/[!@#$%^&*()\\-_\"=+{}; :,<.>]/, \"Password needs a special character\").min(8, function (_ref) {\n    var min = _ref.min;\n    return \"Password needs at least \" + min + \" characters\";\n  }).required(\"Password is required\"),\n  confirmPassword: yup.string().oneOf([yup.ref(\"password\")], \"Passwords don't match\").required(\"Confirm password is required\")\n});\n\nvar createUser = function createUser(_ref2) {\n  var email = _ref2.email;\n  var commonData = DataManager.getInstance();\n  var userID = \"newUser1\";\n  commonData.setUserID(userID);\n};\n\nfunction RegisterScreen(_ref3) {\n  var _this = this;\n\n  var navigation = _ref3.navigation;\n  return React.createElement(AppScreen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.logoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"tower-beach\",\n    size: 100,\n    color: AppColors.maroon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }\n  }), React.createElement(AppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }, \"Register Here\")), React.createElement(Formik, {\n    initialValues: {\n      fullName: \"\",\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\"\n    },\n    validationSchema: signUpValidateschema,\n    onSubmit: function onSubmit(values, _ref4) {\n      var resetForm = _ref4.resetForm;\n      createUser(values);\n      navigation.navigate(\"TabNav\", {\n        screen: \"Profile\",\n        params: {\n          paramEmail: values.email,\n          paramName: values.fullName,\n          paramImage: values.image = require(\"../assets/user2.jpg\")\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, function (_ref5) {\n    var values = _ref5.values,\n        handleSubmit = _ref5.handleSubmit,\n        isValid = _ref5.isValid;\n    return React.createElement(React.Fragment, null, React.createElement(Field, {\n      component: AppInput,\n      icon: \"account\",\n      name: \"fullName\",\n      placeholder: \"Full Name\",\n      value: values.fullName,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: AppInput,\n      icon: \"email\",\n      name: \"email\",\n      placeholder: \"Email Address\",\n      keyboardType: \"email-address\",\n      value: values.email,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: AppInput,\n      icon: \"shield-lock-outline\",\n      name: \"password\",\n      placeholder: \"Password\",\n      secureTextEntry: true,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 13\n      }\n    }), React.createElement(Field, {\n      component: AppInput,\n      icon: \"shield-lock\",\n      name: \"confirmPassword\",\n      placeholder: \"Confirm Password\",\n      secureTextEntry: true,\n      value: values.confirmPassword,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }\n    }), React.createElement(AppButton, {\n      title: \"register\",\n      onPress: handleSubmit,\n      disabled: isValid || values.name === \"\" || values.email === \"\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 1\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1,\n    padding: 1\n  }\n});\nexport default RegisterScreen;","map":{"version":3,"sources":["/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/RegisterScreen.js"],"names":["React","MaterialCommunityIcons","Formik","Field","yup","AppColors","AppButton","AppScreen","AppText","AppInput","DataManager","signUpValidateschema","object","shape","fullName","string","matches","required","email","password","min","confirmPassword","oneOf","ref","createUser","commonData","getInstance","userID","setUserID","RegisterScreen","navigation","styles","container","logoContainer","maroon","values","resetForm","navigate","screen","params","paramEmail","paramName","paramImage","image","require","handleSubmit","isValid","name","StyleSheet","create","backgroundColor","background","padding","flex","justifyContent","alignItems","flexGrow"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { View, StyleSheet } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\nimport * as yup from \"yup\";\n\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppText from \"../components/AppText\";\nimport AppInput from \"../components/AppInput\";\nimport DataManager from \"../config/DataManager\";\n\n\nconst signUpValidateschema = yup.object().shape({\n  fullName: yup\n    .string()\n    .matches(/(\\w.+\\s).+/, \"Enter at least 2 names\")\n    .required(\"Full name is required\"),\n  email: yup\n    .string()\n    .email(\"Please enter valid email\")\n    .required(\"Email is required\"),\n  password: yup\n    .string()\n    .matches(/\\w*[a-z]\\w*/, \"Password needs a small letter\")\n    .matches(/\\w*[A-Z]\\w*/, \"Password needs a capital letter\")\n    .matches(/\\d/, \"Password needs a number\")\n    .matches(\n      /[!@#$%^&*()\\-_\"=+{}; :,<.>]/,\n      \"Password needs a special character\"\n    )\n    .min(8, ({ min }) => `Password needs at least ${min} characters`)\n    .required(\"Password is required\"),\n  confirmPassword: yup\n    .string()\n    .oneOf([yup.ref(\"password\")], \"Passwords don't match\")\n    .required(\"Confirm password is required\"),\n});\n\n\nconst createUser = ({email}) => {\n  let commonData = DataManager.getInstance();\n  let userID = \"newUser1\";\n  commonData.setUserID(userID);\n}\n\nfunction RegisterScreen({ navigation }) {\n  return (\n    <AppScreen style={styles.container}>\n      <View style={styles.logoContainer}>\n        <MaterialCommunityIcons\n          name=\"tower-beach\"\n          size={100}\n          color={AppColors.maroon}\n        />\n        <AppText>Register Here</AppText>\n      </View>\n      <Formik\n        initialValues={{\n          fullName: \"\",\n          email: \"\",\n          password: \"\",\n          confirmPassword: \"\",\n        }}\n        validationSchema={signUpValidateschema}\n        onSubmit={(values, { resetForm }) => {\n          createUser(values);\n          navigation.navigate(\"TabNav\", {\n            screen: \"Profile\",\n              params:{\n                paramEmail: values.email,\n                paramName: values.fullName,\n                paramImage:values.image=require(\"../assets/user2.jpg\")\n              }\n          });\n        }}\n      >\n        {({ values, handleSubmit, isValid }) => (\n          <>\n            <Field\n              component={AppInput}\n              icon=\"account\"\n              name=\"fullName\"\n              placeholder=\"Full Name\"\n              value={values.fullName}\n            />\n            <Field\n              component={AppInput}\n              icon=\"email\"\n              name=\"email\"\n              placeholder=\"Email Address\"\n              keyboardType=\"email-address\"\n              value={values.email}\n            />\n\n            <Field\n              component={AppInput}\n              icon=\"shield-lock-outline\"\n              name=\"password\"\n              placeholder=\"Password\"\n              secureTextEntry\n            />\n\n            <Field\n              component={AppInput}\n              icon=\"shield-lock\"\n              name=\"confirmPassword\"\n              placeholder=\"Confirm Password\"\n              secureTextEntry\n              value={values.confirmPassword}\n            />\n\n            <AppButton\n              title=\"register\"\n              onPress={handleSubmit}\n              disabled={isValid || values.name === \"\" || values.email === \"\"}\n            />\n          </>\n        )}\n      </Formik>\n    </AppScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 1,\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1,\n    padding: 1,\n  },\n});\nexport default RegisterScreen;\n"]},"metadata":{},"sourceType":"module"}