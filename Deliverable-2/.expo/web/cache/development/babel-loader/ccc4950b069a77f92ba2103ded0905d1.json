{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/components/AppPicker.js\";\nimport React, { useState } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport AppColors from \"../config/AppColors\";\nimport AppText from \"../components//AppText\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppPickerItem from \"../components/AppPickerItem\";\n\nfunction AppPicker(_ref) {\n  var _this = this;\n\n  var data = _ref.data,\n      icon = _ref.icon,\n      placeholder = _ref.placeholder,\n      numColumns = _ref.numColumns,\n      selectedItem = _ref.selectedItem,\n      onSelectedItem = _ref.onSelectedItem;\n\n  var _useState = useState(false),\n      _useState2 = _slicedToArray(_useState, 2),\n      modalVisible = _useState2[0],\n      setModalVisible = _useState2[1];\n\n  return React.createElement(React.Fragment, null, React.createElement(TouchableWithoutFeedback, {\n    onPress: function onPress() {\n      return setModalVisible(true);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }\n  }, React.createElement(View, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }\n  }, icon && React.createElement(MaterialCommunityIcons, {\n    name: icon,\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 20\n    }\n  }), React.createElement(AppText, {\n    style: styles.text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 11\n    }\n  }, \" \", selectedItem ? selectedItem.label : placeholder, \" \"), React.createElement(MaterialCommunityIcons, {\n    name: \"chevron-down\",\n    size: 30,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 11\n    }\n  }))), React.createElement(Modal, {\n    visible: modalVisible,\n    animationType: \"slide\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, React.createElement(AppScreen, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(Button, {\n    title: \"Close\",\n    onPress: function onPress() {\n      return setModalVisible(false);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 11\n    }\n  }), React.createElement(FlatList, {\n    numColumns: numColumns,\n    data: data,\n    keyExtractor: function keyExtractor(item) {\n      return item.value.toString();\n    },\n    renderItem: function renderItem(_ref2) {\n      var item = _ref2.item;\n      return React.createElement(AppPickerItem, {\n        onPress: function onPress() {\n          setModalVisible(false);\n          onSelectedItem(item);\n        },\n        label: item.label,\n        icon: item.icon,\n        backgroundColor: item.backgroundColor,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 15\n        }\n      });\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 11\n    }\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.inputTextBackground,\n    flexDirection: \"row\",\n    borderRadius: 30,\n    padding: 10,\n    marginVertical: 10,\n    marginTop: 10,\n    width: \"100%\"\n  },\n  text: {\n    flex: 1\n  }\n});\nexport default AppPicker;","map":{"version":3,"sources":["/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/components/AppPicker.js"],"names":["React","useState","MaterialCommunityIcons","AppColors","AppText","AppScreen","AppPickerItem","AppPicker","data","icon","placeholder","numColumns","selectedItem","onSelectedItem","modalVisible","setModalVisible","styles","container","text","label","item","value","toString","backgroundColor","StyleSheet","create","inputTextBackground","flexDirection","borderRadius","padding","marginVertical","marginTop","width","flex"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n\nimport {\n  View,\n  StyleSheet,\n  Modal,\n  Button,\n  TouchableWithoutFeedback,\n  FlatList,\n} from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\n\nimport AppColors from \"../config/AppColors\";\nimport AppText from \"../components//AppText\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppPickerItem from \"../components/AppPickerItem\";\n\nfunction AppPicker({ data, icon, placeholder, numColumns, selectedItem, onSelectedItem }) {\n  const [modalVisible, setModalVisible] = useState(false);\n\n  return (\n    <>\n      <TouchableWithoutFeedback onPress={() => setModalVisible(true)}>\n        <View style={styles.container}>\n          {icon && <MaterialCommunityIcons name={icon} size={30} />}\n          <AppText style={styles.text}> {selectedItem? selectedItem.label : placeholder} </AppText>\n          <MaterialCommunityIcons name=\"chevron-down\" size={30} />\n        </View>\n      </TouchableWithoutFeedback>\n      <Modal visible={modalVisible} animationType=\"slide\">\n        <AppScreen>\n          <Button title=\"Close\" onPress={() => setModalVisible(false)} />\n          <FlatList\n            numColumns={numColumns}\n            data={data}\n            keyExtractor={(item) => item.value.toString()}\n            renderItem={({ item }) => (\n              <AppPickerItem\n                onPress={() => {\n                    setModalVisible(false);\n                    onSelectedItem(item);\n                }\n\n                }\n                label={item.label}\n                icon={item.icon}\n                backgroundColor={item.backgroundColor}\n              />\n            )}\n          />\n        </AppScreen>\n      </Modal>\n    </>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.inputTextBackground,\n    flexDirection: \"row\",\n    borderRadius: 30,\n    padding: 10,\n    marginVertical: 10,\n    marginTop: 10,\n    width: \"100%\",\n  },\n  text: {\n    flex: 1,\n  },\n});\n\nexport default AppPicker;\n"]},"metadata":{},"sourceType":"module"}