{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nvar _jsxFileName = \"/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/RegisterScreen.js\";\nimport React, { useState, useRef } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\nimport * as Yup from \"yup\";\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppText from \"../components/AppText\";\nvar schema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\")\n});\n\nvar validateUser = function validateUser(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return users.filter(function (user) {\n    return user.email === email && user.password === password;\n  }).length > 0;\n};\n\nfunction RegisterScreen(_ref2) {\n  var _this = this;\n\n  var navigation = _ref2.navigation;\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      inputFName = _useState2[0],\n      setUserFName = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      email = _useState4[0],\n      setEmail = _useState4[1];\n\n  var _useState5 = useState(),\n      _useState6 = _slicedToArray(_useState5, 2),\n      password = _useState6[0],\n      setPassword = _useState6[1];\n\n  var ref_InputPword = useRef();\n  var ref_InputEmail = useRef();\n  return React.createElement(AppScreen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.logoContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"tower-beach\",\n    size: 100,\n    color: AppColors.maroon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }), React.createElement(AppText, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, \"Register Here\")), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref3) {\n      var resetForm = _ref3.resetForm;\n\n      if (validateUser(values)) {\n        console.log(values);\n        resetForm();\n        navigation.navigate(\"Home\");\n      } else {\n        resetForm();\n        alert(\"Invalid Login Details\");\n      }\n    },\n    validationSchema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        errors = _ref4.errors,\n        setFieldTouched = _ref4.setFieldTouched,\n        touched = _ref4.touched;\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: styles.textInputContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }\n    }, React.createElement(AppTextInput, {\n      icon: \"account\",\n      placeholder: \"First Name\",\n      autoComplete: \"off\",\n      autofocus: \"true\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      keyboardType: \"email-address\",\n      textContentType: \"givenName\",\n      returnKeyType: \"next\",\n      onChangeText: function onChangeText(userFName) {\n        return setUserFName(inputFName);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 15\n      }\n    }), touched.account && React.createElement(AppText, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, errors.account), React.createElement(AppTextInput, {\n      placeholder: \"Email Address\",\n      icon: \"email\",\n      autoComplete: \"off\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      returnKeyType: \"next\",\n      onChangeText: function onChangeText(inputEmail) {\n        return setEmail(inputEmail);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 15\n      }\n    }), touched.email && React.createElement(AppText, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 17\n      }\n    }, errors.email), React.createElement(AppTextInput, {\n      placeholder: \"Password\",\n      icon: \"lock\",\n      autoCapitalize: \"none\",\n      autoComplete: \"off\",\n      autoCorrect: false,\n      secureTextEntry: true,\n      textContentType: \"password\",\n      onChangeText: function onChangeText(inputPassword) {\n        return setPassword(inputPassword);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 15\n      }\n    }), touched.password && React.createElement(AppText, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 17\n      }\n    }, errors.password), React.createElement(AppButton, {\n      title: \"Login\",\n      onPress: function onPress() {\n        return handleSubmit;\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 15\n      }\n    })));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 1\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1\n  },\n  textInputContainer: {\n    paddingVertical: 15\n  },\n  error: {\n    color: \"red\",\n    fontSize: 16.5,\n    flexBasis: \"auto\",\n    flexShrink: 1\n  }\n});\nexport default RegisterScreen;","map":{"version":3,"sources":["/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/RegisterScreen.js"],"names":["React","useState","useRef","MaterialCommunityIcons","Formik","Field","Yup","AppColors","AppButton","AppScreen","AppTextInput","AppText","schema","object","shape","email","string","required","label","password","min","validateUser","users","filter","user","length","RegisterScreen","navigation","inputFName","setUserFName","setEmail","setPassword","ref_InputPword","ref_InputEmail","styles","container","logoContainer","maroon","values","resetForm","console","log","navigate","alert","handleChange","handleSubmit","errors","setFieldTouched","touched","textInputContainer","userFName","account","error","inputEmail","inputPassword","StyleSheet","create","backgroundColor","background","padding","flex","justifyContent","alignItems","flexGrow","paddingVertical","color","fontSize","flexBasis","flexShrink"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n\nimport { View, StyleSheet, TextInput } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik, Field } from \"formik\";\n\nimport * as Yup from \"yup\";\n\nimport AppColors from \"../config/AppColors\";\nimport AppButton from \"../components/AppButton\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppText from \"../components/AppText\";\n\nconst schema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).label(\"Password\"),\n});\n\nconst validateUser = ({ email, password }) => {\n  return (\n    users.filter((user) => user.email === email && user.password === password)\n      .length > 0\n  );\n};\n\n\n\nfunction RegisterScreen({ navigation }) {\n  const [inputFName, setUserFName] = useState();\n  const [email, setEmail] = useState();\n  const [password, setPassword] = useState();\n\n  const ref_InputPword = useRef();\n  const ref_InputEmail = useRef();\n\n  return (\n    <AppScreen style={styles.container}>\n      <View style={styles.logoContainer}>\n        <MaterialCommunityIcons\n          name=\"tower-beach\"\n          size={100}\n          color={AppColors.maroon}\n        />\n        <AppText>Register Here</AppText>\n      </View>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={(values, { resetForm }) => {\n          if (validateUser(values)) {\n            console.log(values);\n            resetForm();\n            navigation.navigate(\"Home\");\n          } else {\n            resetForm();\n            alert(\"Invalid Login Details\");\n          }\n        }}\n        validationSchema={schema}\n      >\n        {({\n          values,\n          handleChange,\n          handleSubmit,\n          errors,\n          setFieldTouched,\n          touched,\n        }) => (\n          <>\n            <View style={styles.textInputContainer}>\n              <AppTextInput\n                icon=\"account\"\n                placeholder=\"First Name\"\n                autoComplete=\"off\"\n                autofocus=\"true\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                keyboardType=\"email-address\"\n                textContentType=\"givenName\"\n                returnKeyType=\"next\"\n                onChangeText={(userFName) => setUserFName(inputFName)}\n              />\n              {touched.account && (\n                <AppText style={styles.error}>{errors.account}</AppText>\n              )}\n              <AppTextInput\n                placeholder=\"Email Address\"\n                icon=\"email\"\n                autoComplete=\"off\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                keyboardType=\"email-address\"\n                textContentType=\"emailAddress\"\n                returnKeyType=\"next\"\n\n                onChangeText={(inputEmail) => setEmail(inputEmail)}\n              />\n              {touched.email && (\n                <AppText style={styles.error}>{errors.email}</AppText>\n              )}\n              <AppTextInput\n                placeholder=\"Password\"\n                icon=\"lock\"\n                autoCapitalize=\"none\"\n                autoComplete=\"off\"\n                autoCorrect={false}\n                secureTextEntry\n                textContentType=\"password\"\n                onChangeText={(inputPassword) => setPassword(inputPassword)}\n              />\n              {touched.password && (\n                <AppText style={styles.error}>{errors.password}</AppText>\n              )}\n              <AppButton\n                title=\"Login\"\n                onPress={() => handleSubmit}\n              />\n            </View>\n          </>\n        )}\n      </Formik>\n    </AppScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n    flex: 1,\n  },\n  logoContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    flexGrow: 1,\n  },\n  textInputContainer: {\n    paddingVertical: 15,\n  },\n  error: {\n    color: \"red\",\n    fontSize: 16.5,\n    flexBasis: \"auto\",\n    flexShrink: 1,\n  },\n});\nexport default RegisterScreen;\n"]},"metadata":{},"sourceType":"module"}