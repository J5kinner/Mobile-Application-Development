{"ast":null,"code":"var _jsxFileName = \"/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/LoginScreen.js\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppColors from \"../config/AppColors\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppButton from \"../components/AppButton\";\nimport AppText from \"../components/AppText\";\nvar schema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).max(8).label(\"Password\")\n});\nvar users = [{\n  name: \"Phil Dooley\",\n  email: \"phil@gmail.com\",\n  password: \"asdf\"\n}, {\n  name: \"Bob Marley\",\n  email: \"Bob@gmail.com\",\n  password: \"qwer\"\n}];\n\nvar validateUser = function validateUser(_ref) {\n  var email = _ref.email,\n      password = _ref.password;\n  return users.filter(function (user) {\n    return user.email === email && user.password === password;\n  }).length > 0;\n};\n\nfunction LoginScreen(_ref2) {\n  var _this = this;\n\n  var navigation = _ref2.navigation;\n  return React.createElement(AppScreen, {\n    style: styles.container,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }\n  }, React.createElement(View, {\n    style: styles.welcomeContainer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }\n  }, React.createElement(MaterialCommunityIcons, {\n    name: \"baguette\",\n    size: 90,\n    color: AppColors.maroon,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  })), React.createElement(Formik, {\n    initialValues: {\n      email: \"\",\n      password: \"\"\n    },\n    onSubmit: function onSubmit(values, _ref3) {\n      var resetForm = _ref3.resetForm;\n\n      if (validateUser(values)) {\n        console.log(values);\n        resetForm();\n        navigation.navigate(\"Home\");\n      } else {\n        resetForm();\n        alert(\"Invalid Login Details\");\n      }\n    },\n    validationSchema: schema,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }\n  }, function (_ref4) {\n    var values = _ref4.values,\n        handleChange = _ref4.handleChange,\n        handleSubmit = _ref4.handleSubmit,\n        errors = _ref4.errors,\n        setFieldTouched = _ref4.setFieldTouched,\n        touched = _ref4.touched;\n    return React.createElement(React.Fragment, null, React.createElement(View, {\n      style: styles.textInputContainer,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, React.createElement(AppTextInput, {\n      icon: \"email\",\n      placeholder: \"Email Address\",\n      autoComplete: \"off\",\n      autoCapitalize: \"none\",\n      autoCorrect: false,\n      keyboardType: \"email-address\",\n      textContentType: \"emailAddress\",\n      value: values.email,\n      onBlur: function onBlur() {\n        return setFieldTouched(\"email\");\n      },\n      onChangeText: handleChange(\"email\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 15\n      }\n    }), touched.email && React.createElement(AppText, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }\n    }, errors.email), React.createElement(AppTextInput, {\n      placeholder: \"Password\",\n      icon: \"lock\",\n      autoCapitalize: \"none\",\n      autoComplete: \"off\",\n      autoCorrect: false,\n      secureTextEntry: true,\n      value: values.password,\n      textContentType: \"password\",\n      onBlur: function onBlur() {\n        return setFieldTouched(\"password\");\n      },\n      onChangeText: handleChange(\"password\"),\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 15\n      }\n    }), touched.password && React.createElement(AppText, {\n      style: styles.error,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }\n    }, errors.password)), React.createElement(AppButton, {\n      title: \"Login\",\n      onPress: handleSubmit,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 13\n      }\n    }));\n  }));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25\n  },\n  welcomeContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 50\n  },\n  textInputContainer: {\n    marginVertical: 75\n  },\n  error: {\n    color: \"red\",\n    fontSize: 17\n  }\n});\nexport default LoginScreen;","map":{"version":3,"sources":["/home/jonah/Desktop/COMP3130/Mobile-Applications-Development/Deliverable-1/screens/LoginScreen.js"],"names":["React","MaterialCommunityIcons","Formik","Yup","AppTextInput","AppColors","AppScreen","AppButton","AppText","schema","object","shape","email","string","required","label","password","min","max","users","name","validateUser","filter","user","length","LoginScreen","navigation","styles","container","welcomeContainer","maroon","values","resetForm","console","log","navigate","alert","handleChange","handleSubmit","errors","setFieldTouched","touched","textInputContainer","error","StyleSheet","create","backgroundColor","background","padding","justifyContent","alignItems","marginTop","marginVertical","color","fontSize"],"mappings":"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","sourcesContent":["import React from \"react\";\n\nimport { View, StyleSheet, TextInput } from \"react-native\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport { Formik } from \"formik\";\nimport * as Yup from \"yup\";\n\nimport AppTextInput from \"../components/AppTextInput\";\nimport AppColors from \"../config/AppColors\";\nimport AppScreen from \"../components/AppScreen\";\nimport AppButton from \"../components/AppButton\";\nimport AppText from \"../components/AppText\";\n\nconst schema = Yup.object().shape({\n  email: Yup.string().required().email().label(\"Email\"),\n  password: Yup.string().required().min(4).max(8).label(\"Password\"),\n});\n\nconst users = [\n  {\n    name: \"Phil Dooley\",\n    email: \"phil@gmail.com\",\n    password: \"asdf\",\n  },\n  {\n    name: \"Bob Marley\",\n    email: \"Bob@gmail.com\",\n    password: \"qwer\",\n  },\n];\n\nconst validateUser = ({email, password}) => {\n  return(\n    users.filter((user) => user.email === email && user.password === password).length > 0\n  );\n};\n\nfunction LoginScreen({ navigation }) {\n  return (\n    <AppScreen style={styles.container}>\n      <View style={styles.welcomeContainer}>\n        <MaterialCommunityIcons\n          name=\"baguette\"\n          size={90}\n          color={AppColors.maroon}\n        />\n      </View>\n      <Formik\n        initialValues={{ email: \"\", password: \"\" }}\n        onSubmit={(values, {resetForm}) => {\n          if(validateUser(values)){\n            console.log(values);\n            resetForm();\n            navigation.navigate(\"Home\");\n          } else {\n            resetForm();alert(\"Invalid Login Details\")\n          }\n        }}\n        validationSchema={schema}\n      >\n        {({ values, handleChange, handleSubmit, errors, setFieldTouched, touched }) => (\n          <>\n            <View style={styles.textInputContainer}>\n              <AppTextInput\n                icon=\"email\"\n                placeholder=\"Email Address\"\n                autoComplete=\"off\"\n                autoCapitalize=\"none\"\n                autoCorrect={false}\n                keyboardType=\"email-address\"\n                textContentType=\"emailAddress\"\n                value={values.email}\n                onBlur={() => setFieldTouched(\"email\")}\n                onChangeText={handleChange(\"email\")}\n              />\n              {touched.email && (\n                <AppText style={styles.error}>{errors.email}</AppText>\n              )}\n              <AppTextInput\n                placeholder=\"Password\"\n                icon=\"lock\"\n                autoCapitalize=\"none\"\n                autoComplete=\"off\"\n                autoCorrect={false}\n                secureTextEntry\n                value={values.password}\n\n                textContentType=\"password\"\n                onBlur={() => setFieldTouched(\"password\")}\n                onChangeText={handleChange(\"password\")}\n              />\n              {touched.password && (\n                <AppText style={styles.error}>{errors.password}</AppText>\n              )}\n            </View>\n            <AppButton title=\"Login\" onPress={handleSubmit} />\n          </>\n        )}\n      </Formik>\n    </AppScreen>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: AppColors.background,\n    padding: 25,\n  },\n  welcomeContainer: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    marginTop: 50,\n  },\n  textInputContainer: {\n    marginVertical: 75,\n  },\n  error: {\n    color: \"red\",\n    fontSize: 17,\n  },\n});\nexport default LoginScreen;\n"]},"metadata":{},"sourceType":"module"}